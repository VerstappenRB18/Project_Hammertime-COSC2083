Project HammerTime Final Report
─    
LeMen
Declaration and statement of authorship
    1.	I/we have not impersonated, or allowed myself/ourselves to be impersonated by, any person for the purposes of this assessment.
    2.	This assessment is my/our original work and no part of it has been copied from any other source except where due acknowledgement is made.
    3.	No part of this assessment has been written for me/us by any other person except where such collaboration has been authorized by the lecturer/teacher concerned.
    4.	Where this work is being submitted for individual assessment, I declare that it is my original work and that no part has been contributed by, produced by or in conjunction with another student.
    5.	I/we give permission for my/our assessment response to be reproduced, communicated, compared and archived for the purposes of detecting plagiarism.
    6.	I/we give permission for a copy of my/our assessment to be retained by the university for review and comparison, including review by external examiners.
    7.	I/we understand that:
    ●	Plagiarism is the presentation of the work, idea or creation of another person as though it is your own. It is a form of cheating and is a very serious academic offense that may lead to exclusion from the University. Plagiarised material can be drawn from, and presented in, written, graphic and visual form, including electronic data and oral presentations. Plagiarism occurs when the origin of the material used is not appropriately cited.
    ●	Plagiarism includes the act of assisting or allowing another person to plagiarize or to copy my work.
I/we agree and acknowledge that:
    1.	I/we have read and understood the Declaration and Statement of Authorship above.
    2.	If I/we do not agree to the Declaration and Statement of Authorship in this context and a signature is not included below, the assessment outcome is not valid for assessment purposes and will not be included in my final result for this course.

Table of contents
Declaration and statement of authorship	1
Team profile	3 
Tools	4
Project Description	4
    Overview
    Detailed Description
        Aims	5
        Plans and Progress	8
        Roles	10
        Scopes and Limits	11
        Tools and Technologies	12
        Testing	
        Risks
        Group processes and communications
Skills and Jobs	5
Project Outcome	5
Reflection	5
    Individual Reflection	5
    Group Reflection	5
	
Team profile
To Bao Minh Hoang (s3978554), the manager of Le Men. As a first-year student, Hoang’s experience within his field of study is limited, Hoang’s goal when enrolling in this course is to become a software engineer, giving a clear purpose to further demonstrate, improve his skill, and knowledge.  Moreover, years of leadership experience more than makes up for it. Additionally, with deep knowledge within the automotive industries and a passion for racing, Hoang will be able to perform his role sufficiently.

Ton That Huu Luan (s3958304), Le Men’s lead researcher. A first-year student, with various experience within the field of IT, including hardware, and programming. Compounded with his dream of becoming a F1 engineer, Luan understands the role of technology, especially the software aspect, in the development of racing machines. Moreover, his extensive knowledge within the racing series, most notably F1, gives him insights that even members of Le Men are unaware of. Additionally, Luan’s enthusiasm for the project has proven his worth for the title. 

Nguyen Vinh Gia Bao (s3986287), Le Men’s lead developer. Though a first-year student, his knowledge of programming and development are above the requirements of this course. Additionally, Bao’s absolute determination to be an engineer for the prestigious automotive brand, Porsche, have been a fuel for his endeavors to become the absolute best in his field. With Bao’s proven knowledge of the fundamentals of track performance and clear enthusiasm towards HammerTime, making Bao an excellent choice for his role.

Le Viet Bao (s3979654), Le Men’s co-manager. A first-year student, currently enrolling in RMIT’s Information Technology bachelor program, Viet Bao’s experience within this field is limited, though he was not chosen for this role based on his experience. The scale of HammerTime is extensive, so it was decided among the group a second manager was needed to prevent extension over the predetermined scope, and Viet Bao’s skills are perfect for this role. Though lacking in his field of study, the knowledge of all other relevant fields more than makes up for it, including research, management. Additionally, Viet Bao’s adaptability and flexibility have proven him to be very capable, unafraid of changes and challenges Moreover, his determination to see Le Men success is the main driving force to push his limits and better himself. Along with Hoang, he will be a great asset to the team.

Tools
LeMen’s Project HammerTime Git repository: https://github.com/VerstappenRB18/Project_Hammertime-COSC2083
LeMen’s Project HammerTime website: https://verstappenrb18.github.io/Project_Hammertime-COSC2083/
The GitHub audit trail does not tell the whole story of our group work as it doesn’t account for the research process and most of the report file being done and also with html being a new language for most of the members, some are not proficient at it yet so some members might appear less on the audit trail or not at all because the task was handed to 2 members instead.

Project Description

Overview
Car, or automobile, has always been a fascinating machine which people can discuss altogether for hours. The top speed, braking system, or every component that is assembled in a car always makes automobile enthusiasts intrigued. However, there is another aspect when a person driving the car wants to experience, which is car racing.
Since our group consists of members who are interested in the arts of car racing, we want to put our IT knowledge combined with rudimentary ideas of auto racing into practice. Therefore, we collectively as a group decided to create a mobile application called “Project Hammertime”, a platform that assists aspiring racing drivers by guiding them how to conquer the racing track with their machinery.
As a team, we all have a strong enthusiasm for racing. This project is really interesting for us because all of us have been following racing for the longest time and seeing all of the professional drivers doing a perfect lap right in front of our eyes, e.g Lewis Hamilton in the Formula 1 Singapore Grand Prix 2018 [1] was really mesmerizing and we aim to help people start their journey on becoming better at racing.
We also chose to do this project because we think this is a unique product, as we do not see any other competitors or similar systems available elsewhere. The closest thing to this is Codemaster’s and Electronic Art’s RaceNet [2], which compares two lap times together and shows the user the differences in lap time but this is only available in the F1 2021 [2] and F1 22 [2] video game and not in the real world like with our project.

Detailed Description
Aim
With this app, we aim to:

I.	Feature a variety of car models:
Currently, there are a range of automobiles with various specifications, including variants of the same vehicle, such as the 2020 Alfa Romeo Stelvio, which has ten different configurations and modifications [3] . The software contains data from Auto-API, Data.net's which has one of the largest databases on automobiles, in order to assist users in locating their car's make and model with the correct specification and variation. It includes approximately 46,000 distinct comprehensive automotive technical parameters, over 3000 vehicle models, and over 8400 generations [4]. Simply select the automobile's manufacturer and model (e.g: McLaren 720s). And the application will contain all relevant information regarding the car's acceleration and deceleration capabilities, wheel drive, suspension arrangement, and brake kinds. The software will therefore, in conjunction with the track selection, be able to generate a reference lap showing the fastest path around the track for the user to view prior to setting a personal lap time.

II.	Get reference laps based on the input race tracks
Using data from racingcircuits.info, the application will have a large database containing a variety of racing tracks, such as Silverstone Circuit (United Kingdom) and Circuit de Spa-Francorchamps (Belgium). These circuits typically appear on the Formula One Calendar for Grand Prix races. Users can examine accurate track maps, detailed histories, and onboard videos [5]. The reference lap time for each circuit can vary depending on the type of vehicle selected by the user. These lap times will be manually entered based on real-world racing data, or they will be generated using data from Assetto Corsa's sim racers [6]. Commonly used for setting lap records is the 20.8 km Nürburgring Nordschleife (Germany) due to its combination of long straights that allow a car to reach its top speed and narrow sections that generate extremely high g-forces [7]. Due to varying lap lengths, lap times on this circuit are not comparable, as the majority of laps are completed 200 meters shorter for safety reasons [8]. The fastest lap time ever recorded by a road-legal production car is 6:35.183, set by Mercedes-AMG One driven by DTM driver Maro Engel [9].

III.	Machine learning implementation for various types of corners
In terms of racing, corners are indispensable components of a course. There are various types of corners on the track, and knowing how to navigate them is crucial for achieving a good lap time. There are primarily three types of corners: Prior to a long straight, a short straight, and a series of corners [10]. The racing line is the optimal route through a circuit: if adhered to, it will produce the quickest time at the highest average speed [11]. When approaching a corner on the track, there are three phases or sections; the first section is the braking portion, during which the car must sufficiently decelerate in preparation for the turn-in point. The segment between the turn-in point and the apex point, which is the inside midpoint of the corner, constitutes the second division of the racing line at a corner. After the point of turn-in, the driver aims for the apex point. From the apex point onwards, the final section of the racing line in a corner is where the driver must gradually accelerate out of the corner while still turning and aiming for the outside apex [12]. For the application to function flawlessly, a machine learning concept will be used to identify the various types of corners. Using a data set of onboard videos protected by Formula One Digital Media Limited [13], a variety of Formula One drivers negotiating the same corner on the same track will be categorized.

IV.	Cornering speed evaluation
In conjunction with satellite navigation systems, which are now standard in the majority of smartphones, the application can pinpoint when a shift is made and the approximate speed at which the vehicle is traveling through the corner [14]. With all of the available datasets, the application is able to compare the driver's lap to a simulated one and provide the necessary feedback to improve lap time.

V.	Downshift and upshift instructions
Although each vehicle is unique in its own way, the driver is ultimately responsible for the vehicle's performance on the track. Each vehicle has a transmission to transfer the energy produced by the engine to the drive axle. As the engine produces more power, the crankshaft within the engine also accelerates, increasing the revolutions per minute (rpm) to the point before the engine’s limit, which is represented by a red line on the tachometer (or the rev gauge) on the dashboard [15]. There are numerous transmission types, but the most common are manual gearbox, which requires the driver to change gears via a clutch pedal, automatic gearbox, which can shift gears automatically, and a continuous variable transmission (CVT), which has no physical gears. For track work, a conventional manual gearbox is recommended because it provides the driver with a more engaging experience and greater control over the vehicle, despite the fact that an automatic system would typically result in faster times. A CVT, on the other hand, lacks immediate throttle response and is incapable of handling higher torque loads. [16]

To get the most power out of the engine, it is recommended to shift near or at the redline, as shifting too early can slow acceleration and shifting too late may reduce the car's durability. To distinguish between shifts, the app utilizes sounds produced by the vehicle; as the rpm approaches redline, the sound becomes louder; during an upshift, the sound abruptly stops; and as the rpm drops, the sound becomes softer. The sound produced by a downshift is the exact opposite of that produced by an upshift; after a downshift, the sound will become quieter and spike as the rpm increases. A machine learning algorithm will be utilized to analyze and differentiate the patterns of each action.

VI.	Oversteer/understeer suggestions
Some automobiles struggle to maintain traction at high speeds, resulting in either oversteer or understeer. In RWD vehicles, oversteer occurs when the rear tires lose traction, causing the vehicle to turn more than intended. In contrast, understeering occurs when the front-end slips, rendering the vehicle incapable of turning into a corner. This condition is most prevalent in FWD and AWD vehicles. [17] Since this is track driving, the driver desires as much traction as possible in order to put the power down; losing traction can cause the vehicle to veer off the track or, in the worst case, careen into the barricade. Additionally, one must consider the condition of the tires, as this can have a substantial impact on lap times. Loss of tire traction will result in wheel spin, thereby accelerating tire wear; consequently, the vehicle will struggle to put the power down. Due to the limitations of current smartphone technology, this data will be entered only after a lap has been completed.

VII.	According feedback with the reference lap
The software will be able to provide suitable corner-by-corner feedback in comparison to the reference lap developed by Assetto Corsa [18], one of the most accurate racing simulators utilized by top industry professionals [19]. Once the lap has been recorded, the application will use telemetry data from both the reference lap and the user's lap to compare and provide comments. The feedback comprises information such as the downshifts and upshifts prior to entering a turn, the angle and steering input of the corner entry, and whether or not the apex was reached. It identifies areas in which the lap time can be improved and provides advice for doing so.

Plan and progression
Before “Project Hammertime” came into life, the group had already wanted to create a project that fulfill our passion to motorsport. At first, there were three members (Gia Bao, Huu Luan and Minh Hoang) who already showed a huge interest in car racing so everyone got along very easily. Then in the same tutorial session, we also welcomed Viet Bao, an avid gamer who had enthusiasm for UI design. Though Viet Bao had an obscure view on car racing, he didn’t waste much time to go onboard. Together we formed a group called “Le Men”, which took inspiration from the prestigious endurance racing “24 Hours of Le Mans” [20]. Although we opened to other options such as Student ID reader application, an online library card, when discussing which IT project that should be targeted, Le Men finally decided to work on the project that focused on motorsport, especially four-wheel racing. And that was when “Project Hammertime” took its first steps.

Shift detection:
Regarding this particular feature, right from the start it was renegade to the back to make room for the core feature, the lap time comparisons and feedback system. The purpose of shift detection is to further increase the accuracy of feedback. Initially, the plan was to implement a machine learning algorithm to detect the common patterns of a shift, either upshifts or downshifts, the idea still stands, but some pitfalls did appear. Firstly, implementations, we have vastly underestimated the difficulties of implementing such features. Data has to be gathered from thousands of different sources, cleaned up for the algorithm to function as intended. Speaking of machine learning, Le Men consists of only first-year students that have no prior experience in such an advanced method. A large portion of time and resources were invested into researching on how to construct a functional algorithm, or at the very least, a rough prototype. Alas, that was not possible in such a short span of time. 

Oversteer and understeer inputs:
Originally, this feature was for drivers to input oversteer and understeer at corners that such events have happened. This was conceived to cope with the limitation of the smartphones, and further increase the accuracy of feedback. These inputs are relatively simple to implement as there were only two options available with no further variable other than the drivers themselves. The UI for this particular feature had been made. Though it does not serve in other higher functions.

Speed estimation using GPS:
Lastly, speed estimation based on GPS data was thought up in conjunction with the feedback system, assisting the application in creating a more relevant review of a lap. The feature is rather simple as it requires only GPS data that is easily accessible via smartphones as this is an application, given the user agreed to do so. Though given the time constraint, we were not able to implement it to the fullest extent.

Car database:
In the beginning, project HammerTime intended to feature a massive database with the help of an API from Auto-Data.net [4] but unfortunately, we weren’t able to implement this API in the timeframe of the product due to the fact that the licensing of the API was way pricier than we would have expected so the group got together and decided to make a basic UI prototype of this feature instead. The aim is to gather more support for the project in the future to make it worthwhile for the group to invest in the license to implement it soon.

Feedback to compare with reference lap:
A core feature of the HammerTime app was for the app to compare the lap time of the user to a reference lap using Assetto Corsa’s generated AI lap [18] and give out feedback accordingly. While this seemed like a good idea at the time, through later discussion we found out that the processing power required to run such an intensive app/game like Assetto Corsa was simply too much for a phone to handle and we collectively decided to put this feature on the backburner to focus on creating a UI prototype on how this would have worked if the processing power was in place. The aim in the future is to find another suitable way to generate a reference lap for the user to watch and take lessons from.

Input race tracks and put out reference laps:
For this feature to work properly, we looked for the database pool that contained accurate and up-to-date information of every racing circuit, from temporary to permanent. So we came across a website called racingcircuits.info, which provided us with a wide range of facts and details of each circuit. Although we had a useful source for the database, we couldn’t implement it into the project due to unaffordable licensing and API database. Therefore, a rough prototype was designed to demonstrate how the process worked. Along with details of racing circuits, we also took time to research when and how the fastest lap time of each circuit was recorded, by reading through all the articles from official organizations such as Porsche, Formula One,... and other automobile manufacturers. Given that we could attract enough attention and investment, a proper interface might be implemented in the future so that users can visualize which tracks they want to have a ride.

Feature machine learning for different types of corners:
The key feature of a racing circuit is a series of corners, and with that we needed to understand how corners influenced a lap time, and different types of corners had different cornering speed. So we took a lot of time to read through all the scientific research papers from people who worked in the automobile industry. And in order to make the application detected which type of corner, we wanted to implement machine learning into practice, but it turned out the feature of machine learning required a lot of research and testing, to which we didn’t have enough knowledge and time to understand the concept. As a result, we could only afford to write a brief overview of how machine learning would work in the application and give an example on how to collect data for the process.

Roles 
For HammerTime, for such a small and relatively inexperienced team, it was decided from the start that there was no definitive role, just a rough guideline of each members’ responsibilities, with heavy emphasis on assistance, flexibility. With this model, members were allowed to constantly jump between roles, so as to educate themselves on the fundamentals of various tools and features. Though it has to be said that Le Men has two managing positions, an executive manager, and a co-manager. To elaborate, due to the scale of HammerTime, a second managing role was conceived to minimize scope creep, and further increase proficiency in leadership.

Scope and limitations
The scope of a project is an important factor to consider during the brainstorming phase. It helps to define the boundaries of the project and ensure that the project is achievable within the given timeframe and budget. It also helps to ensure that the project is focused on the desired outcome and that all those involved are aware of the scope of the project.

Our scope for this project will be:
-	A basic idea of how the app works
-	Illustrations on the user’s interface
What our project will not include:
-	A working prototype
-	Machine learning implementations

I.	Limitations of using phone sensors to collect input
The limitations of using a phone's sensors to obtain driving inputs and provide improvement suggestions depend on the type of phone and its sensors. Most smartphones are equipped with a variety of sensors that can detect motion, location, and other environmental elements. These sensors can detect multiple driving actions, including speed, acceleration, braking, and steering.

Using these sensors, a phone may provide input on driving performance, including acceleration and braking rates, as well as steering accuracy. This input can be utilized to provide improvement ideas, such as when to slow down or take a break.

However, there are limitations to employing a phone's sensors to provide driving feedback and improvement ideas. For instance, external factors, such as the weather or road conditions, can impact the precision of the sensors. Moreover, the sensors may be unable to accurately detect some driving inputs, such as gear changes or turns.

To optimize the use of a phone's sensors for driving inputs and providing ideas for improvement, it is essential to ensure that the phone has the most up-to-date sensors and that they are calibrated. In order for the sensors to reliably detect driving inputs, it is also crucial that the phone is properly secured in the vehicle. In order for the phone to receive real-time data and provide more accurate feedback and recommendations, it must be linked to the internet.

II.	Machine learning implementation
Creating an app with machine learning can be a daunting task for students with a limited time frame. Machine learning is a complex field that requires a lot of time and effort to understand and implement. It is not something that can be done quickly or easily, and it requires a lot of research and experimentation to get it right.

The first limitation of implementing machine learning in creating an app with a limited time frame is the lack of knowledge and experience. Machine learning is a complex field that requires a deep understanding of algorithms, data structures, and programming languages. It is not something that can be learned overnight, and it requires a lot of practice and experience to become proficient. Additionally, access to the necessary resources or tools to properly implement machine learning is not widely available.

The second limitation is the amount of time available. Machine learning is a time-consuming process that requires a lot of trial and error. It is not something that can be done quickly, and it requires a lot of patience and dedication to get it right. Additionally, there are a lot of different algorithms and techniques to research and understand and there is simply not enough time.

Overall, implementing machine learning in creating an app with a limited time frame can be a difficult task. It requires a lot of knowledge, experience and time to get it right. However, with the right resources and dedication, it is possible to create an app with machine learning in a limited time frame.

Tools and Technologies

Almost all of the software and tools used in this project are new to us as we are first-year students, but that excites us as we are eager to learn and implement these technologies in the near future.
The most important software that we used is Visual Studio Code (version 1.74.1) , which is the IDE that we used to code and edit our website, the software is free to use and is widely regarded to be the industry standard for coding all languages.
For collaboration, we used GitHub to host our repository and our website, which enables us to work together on the same project at different times. 
We also used GitHub desktop (version 3.1.2) as an interface that lets us easily clone the repository and work on the project locally on our own desktop.
The Canva platform was also used to create early design drafts of what we wanted our app to look like. Members Gia Bao and Minh Hoang specifically had experiences using this software in high school for their respective projects.
Assetto Corsa [18](version 1.16) was used to create the reference lap to showcase to the end user. Gia Bao and Huu Luan have had previous experiences using this application before and know the software well.
The Auto-Data.net API [4] is used as the main database for cars for our app. It contains an extensive amount of over 46000 separate detailed automotive technical specifications, more than 3000 car models and over 8400 generations. This data is licensed and costs 75$ to use.
To display the desired racing track and put out the reference lap, the group collects and uses data from the website racingcircuits.info [5], as it contains useful information about the racing track, from the history of itself, to the circuit map and onboard videos of various drivers driving around the circuit.
